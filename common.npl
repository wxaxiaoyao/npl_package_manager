
NPL.load("(gl)script/ide/commonlib.lua")
NPL.load("(gl)script/ide/System/os/GetUrl.lua")
NPL.load("(gl)script/ide/Files.lua")
NPL.load("(gl)script/ide/Encoding.lua") 

local common = {}

local g_lfs = commonlib.Files.GetLuaFileSystem()
local g_config = NPL.load("config.npl")
local g_log = NPL.load("log.npl")
local g_packages = NPL.load("packages.npl")
local g_file = NPL.load("file.npl")

local g_package_path = g_config.global_package_path

if not g_packages:load(g_package_path .. ".package.list") then
	g_log.warn("加载全局包列表失败...")
end

common.config = g_file:read_table(g_config.config_filename) or g_config
common.log = g_log
common.packages = g_packages
common.file = g_file
common.lfs = g_lfs
common.package_path = g_package_path

-- 字符串比较
function common.string_compare(str1, str2)
	for i = 1, #str1, 1 do
		local n1 = string.byte(str1, i, i) or 0
		local n2 = string.byte(str2, i, i) or 0
		if n1 > n2 then
			return 1
		end
		if n1 < n2 then
			return -1
		end
	end


	if #str1 > #str2 then
		return 1
	end

	if #str1 < #str2 then
		return -1
	end

	return 0
end

--local requests = require("requests")

--function get_url(params)
	--local method = params.method or "GET"

	--if params.headers then
		--params.headers['Content-Type'] = params.headers['Content-Type'] or "application/json"
	--else
		--params.headers = {['Content-Type'] = "application/json"}
	--end

	--if string.lower(method) == "get" then
		--params.params = params.data
	--end
	--local res = requests.request(method, params)

	--res.data = res.json() or res.text

	--return res
--end

function common.get_url(params)
	local method = params.method or "GET"

	if string.upper(method) == "GET" then
		params.qs = params.data
	else
		params.form = params.data
	end
	
	--if params.headers then
		--params.headers['Content-Type'] = params.headers['Content-Type'] or "application/json"
	--else
		--params.headers = {['Content-Type'] = "application/json"}
	--end

	local _, data = System.os.GetUrl(params)
	data.status_code = data.rcode
	return data
end


function common.encode_base64(text)
	--return Encoding.base64(text)
	return ParaMisc.base64(text)
end

function common.decode_base64(text)
	--return Encoding.unbase64(text)
	return ParaMisc.unbase64(text)
end


return common
