
NPL.load("(gl)script/ide/commonlib.lua")
NPL.load("(gl)script/ide/System/os/GetUrl.lua")
NPL.load("(gl)script/ide/Files.lua")

NPL.load("geturl.npl")
local packages = NPL.load("packages.npl")
local g_packages = packages:new()
local log = NPL.load("log.npl")

local g_lfs = commonlib.Files.GetLuaFileSystem()
local g_package_path = "/usr/local/lib/npl_packages"

if not g_packages:load(g_package_path .. "/.package.list") then
	log.warn("加载全局包列表失败...")

	-- 创建全局包列表文件
	--g_packages:save()
end

--log(package_config)

-- 文件是否存在
function file_is_exist(path)
	return (g_lfs.attributes(path))
end

-- 解析包
function parse_package_name(package_name)
	--local package_src = {type = nil, package_name = nil}
	if string.match(package_name, "^http") then	
		return "download_url"
	end

	if string.match(package_name, "^http.*package%.npl$") then
		return "package_config_url"
	end

	if string.match(package_name, "^[^/]*/[^/]*$") then
		return "github"
	end

	return "server"
end

function clean_tmp_package(opt)
	ParaIO.DeleteFile(opt.package_zip_file)
end

-- 通过url下载包
function download_package_by_url(package_args)
	local download_url = package_args.download_url
	local package_name = package_args.package_name or os.time()
	local result = {}
	log.info("开始下载安装包, 请耐心等待...")
	local res = get_url({
		method = "GET",
		url = download_url,
	})	

	if res.status_code ~= 200 then
		log("download package failed: " .. download_url)
		return false
	end

	local data = res.data
	--log(data)
	
	local tmp_file_dir = g_package_path .. "/.tmp/"
	local tmp_file = tmp_file_dir .. package_name .. ".zip";
	--log.info("临时目录:", tmp_file_dir)
	if not file_is_exist(tmp_file_dir) then
		local ok, err = ParaIO.CreateDirectory(tmp_file_dir)
		if not ok then
			log("创建临时目录失败:" .. err)
			return false
		end
	end

	log("成功下载安装包:" .. download_url)
	log("创建临时文件:", tmp_file)
	local file = io.open(tmp_file, "w")
	if not file then
		log.fatal("无法创建临时文件:" .. tmp_file)
		return false
	end
	file:write(data)
	file:close()

	result.package_zip_file = tmp_file

	--if not is_parse_package_config then
		--return true, tmp_file
	--end

	if(ParaAsset.OpenArchive(tmp_file, true)) then
		local filesOut = {};
		--commonlib.Files.Find(filesOut, "", 0, 10000, ":package.npl", zipPath);
		commonlib.Files.Find(filesOut, "", 0, 10000, ":^[^/]*/?package.npl$", tmp_file);
		local item = filesOut[1]
		if not item then
			log.fatal("安装包内没有配置文件")
			ParaAsset.CloseArchive(tmp_file);
			return false
		end
		local file = ParaIO.open(tmp_file_dir .. item.filename, "r")
		if(file:IsValid()) then
			local binData = file:GetText();
			file:close();

			result.package_config_filename = item.filename
			result.package_config = binData
			ParaAsset.CloseArchive(tmp_file);
			--log(binData)
			return true, result
		end
		ParaAsset.CloseArchive(tmp_file);

		log.fatal("无效配置文件")
		return false
	end

	log.fatal("无法打开安装包")
	return false
end

-- 获取package config 通过url
function get_package_config_by_url(url)
	log.info("package config url:" .. url)
	local res = get_url({
		method = "GET",
		url = url,
	})	

	if res.status_code ~= 200 then
		log("download package config failed: " .. download_url)
		return false
	end
	
	return true, res.data
end

-- 用git安装包
function install_package_by_zip(package)
	local package_config = package.package_config
	if not package_config.name or not package_config.version then
		log.fatal("包配置文件错误")
		return false
	end

	local package_dir = g_package_path .. "/" .. package_config.name .. "/" .. package_config.version .. "/"
	package.install_dir = package_dir
	log.info("包路径:" .. package_dir)
	if file_is_exist(package_dir) then
		log.info("包已存在, 删除旧目录...")
		commonlib.Files.DeleteFolder(package_dir)
		--return false
	end

	local ok = ParaIO.CreateDirectory(package_dir)
	if not ok then
		log.fatal("创建包目录失败")
		return false
	end

	local package_name = package_config.name
	local tmp_file = package.package_zip_file
	local tmp_file_dir = string.gsub(tmp_file, "[^/]*$", "")
	if(ParaAsset.OpenArchive(tmp_file, true)) then
		local filesOut = {};
		commonlib.Files.Find(filesOut, "", 0, 100000, ":.", tmp_file);
		for _,item in ipairs(filesOut) do 
			local filename = string.gsub(item.filename, "^[^/]*/?", "")
			filename = package_dir .. filename
			if item.filesize > 0 then
				local file_dir = string.gsub(filename, "[^/]*$", "")
				ParaIO.CreateDirectory(file_dir)
				local file = ParaIO.open(tmp_file_dir .. item.filename, "r")
				if file:IsValid() then
					local binData = file:GetText(0, -1);
					file:close();

					log("写文件:", filename)
					--log("文件内容", binData)
					local new_file = io.open(filename, "w")
					if new_file then
						new_file:write(binData, #binData)
						new_file:close()
					else 
						log.warn("写文件出错:" .. filename)
					end
				end
			else
				-- dir
			end
		end
		ParaAsset.CloseArchive(tmp_file);
	else 
		log.fatal("打开包文件出错....")
		return false
	end

	-- 加载执行包安装脚本
	local install_file = package_dir .. "install.lua"
	if file_is_exist(install_file) then
		pcall(function()
			NPL.load(install_file)
		end)
	end
	return true
end

-- 下载包
function download_package(package_args)
	local package_src = package_args.download_url or package_args.package_src or package_args.package_name
	local package, package_config, package_zip_file, download_url = nil
	local package_src_type = parse_package_name(package_src)

	if package_src_type == "download_url" then
		download_url = package_src
	--elseif package_src_type == "package_config_url" then
		--_, package_config = get_package_config_by_url(package_name)
	elseif package_src_type == "github" then
		--local url = "https://raw.githubusercontent.com/" .. package_name .. "/master/package.npl"
		download_url = "https://codeload.github.com/" .. package_src .. "/zip/master"
	elseif package_src_type == "server" then
		download_url = "http://keepwork.com/npl_packages/" .. package_src
		--_, package = download_package_by_url(download_url)
	else 
		log.fatal("无法解析包名")
		return false
	end

	package_args.download_url = download_url
	_, package = download_package_by_url(package_args)
	if not package then
		log.fatal("无法下载解析安装包")
		return false
	end

	package_zip_file = package.package_zip_file
	package_config = package.package_config
	if not package_config or not package_zip_file then
		if package_zip_file then
			ParaIO.DeleteFile(package_zip_file)
		end
		log.fatal("无法获取包或无法解析包配置文件...", package_config, package_zip_file)
		return false
	end

	package_config = NPL.LoadTableFromString(package_config)
	
	if not package_config then
		ParaIO.DeleteFile(package_zip_file)
		log.fatal("包配置文件格式错误")
		log.info(package.package_config)
		return false
	end

	local opt = {
		package_config = package_config,
		package_config_filename = package.package_config_filename,
		package_src = package_src,
		download_url = download_url,
		package_src_type = package_src_type,
		package_zip_file = package_zip_file,
	}

	return true, opt
end

-- 解析包依赖
function install_package_dependencies(package_config)
	local dependencies = package_config.dependencies or {}

	local package_args = {}
	for key, dep in pairs(dependencies or {}) do
		package_args.package_name = key
		if type(dep) == "table" then
			package_args.package_src = dep.package_src
			package_args.download_url = dep.download_url
			package_args.version = dep.version
		else 
			package_args.version = dep
		end

		log.info("依赖包:" .. key)

		if not install_package(package_args) then
			return false
		end
	end

	return true
end

-- 安装包
function install_package(package_args)
	if not package_args.package_name then
		log.fatal("缺少参数")
		return false
	end

	log.info("开始安装包:" .. package_args.package_name)

	-- 下载包, 并读取包配置
	local _, package = download_package(package_args)
	if not package or not package.package_config then
		log.fatal("下载解析包失败")
		return false
	end
	local package_config = package.package_config

	--log.info(package_config)
	-- 安装包依赖
	if not install_package_dependencies(package_config) then
		log.fatal("安装包依赖失败")
		clean_tmp_package(package)
		return
	end

	-- 检测是否已安装
	if g_packages:is_exist(package_config) then
		log.info("包已安装...")
		clean_tmp_package(package)
		return true
	end

	-- 安装包
	local ok = install_package_by_zip(package)
	if ok then
		g_packages:insert_package({
			name = package_config.name,
			version = package_config.version,
			package_src = package.package_src,
			download_url = package.download_url,
			install_dir = package.install_dir,
			instll_date = os.date("%Y-%m-%d"),
		})
		g_packages:save()
		log.info("成功安装包:" .. package_config.name)
	else
		log.fatal("安装失败")
		clean_tmp_package(package)
		return false
	end

	clean_tmp_package(package)
	return true
end

--download_package("wxaxiaoyao/nws")
--install_package("wxaxiaoyao/nws")
--install_package({
	--download_url = "http://localhost:9000/test.zip",
	--package_name = "test",
--})

return function(ctx)
	local args = ctx.arg
	
	local package_args = {}
	if args[1]  == "install" then
		package_args.package_name = args[2]
		for _, value in ipairs(args or {}) do
			package_args.package_src = string.match(value, "--package_src=(.*)")
			package_args.download_url = string.match(value, "--download_url=(.*)")
			package_args.version = string.match(value, "--version=(.*)")
		end
		--log(package_args)
		install_package(package_args)
	end
end





